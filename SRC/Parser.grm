%{
open AbSyn;

fun packLiteral f (v,p) = Literal (BVal (f v) ,p)
fun opGen con p (e1,e2) = con (e1,e2,p)
%}

/* keywords */
%token <AbSyn.Pos> TProgram TFunction TProcedure
%token <AbSyn.Pos> TVar TBegin TEnd
%token <AbSyn.Pos> TIf TThen TElse
%token <AbSyn.Pos> TWhile TDo TReturn

/* type keywords */
%token <AbSyn.Pos> TArray TOf
%token <AbSyn.Pos> TInt TChar TBool

/* punctuation */
%token <AbSyn.Pos> TSemi TColon TComma TAssign

/* operators */
%token <AbSyn.Pos> TPlus TMinus TTimes TSlash
%token <AbSyn.Pos> TEq TLess TAnd TOr
%token <AbSyn.Pos> TNot


/* parentheses */
%token <AbSyn.Pos> TLParen TRParen
%token <AbSyn.Pos> TLCurly TRCurly
%token <AbSyn.Pos> TLBracket TRBracket

/* identifiers */
%token <AbSyn.Ident * AbSyn.Pos> TId

/* literals */
%token <int * AbSyn.Pos> TNLit
%token <bool * AbSyn.Pos> TBLit
%token <char * AbSyn.Pos> TCLit
%token <string * AbSyn.Pos> TSLit

%token <AbSyn.Pos> TEOF

%right TId TSemi /* for the sake of Decs */
%right TIf TElse TThen
%left TOr
%left TAnd
%right TNot
%left TEq TLess
%left TPlus TMinus
%left TTimes TSlash

/* main parser */
%start Prog
%type <AbSyn.Prog> Prog
%type <FunDec list> Fundecs
%type <FunDec> Fundec
%type <StmtBlock> Block
%type <Dec list> DBlock
%type <Stmt list> SBlock
%type <Stmt list> StmtSeq
%type <Stmt> Stmt
%type <LVAL * Pos> LVal
%type <Exp option> Ret
%type <Exp> Exp
%type <Exp list> Exps
%type <Exp list> CallParams
%type <Dec list> PDecl
%type <Dec list> Params
%type <Dec> Dec
%type <Dec list> Decs
%type <Type> Type

%%

Prog:
    TProgram TId TSemi Fundecs TEOF { $4 }
;

Fundecs:
    Fundec Fundecs { $1 :: $2 }
  | Fundec         { [$1] }
;

Fundec:
    TFunction  TId TLParen PDecl TRParen TColon Type Block TSemi { Func ($7,#1 $2,$4,$8,$1) }
  | TProcedure TId TLParen PDecl TRParen             Block TSemi { Proc (#1 $2,$4,$6,$1)    }
;

Block:
    DBlock SBlock { Block($1,$2) }
;

DBlock:
    TVar Decs   { $2 }
  | /* empty */ { [] }
;

SBlock:
    TBegin StmtSeq TEnd { $2   }
  | Stmt                { [$1] }
;

StmtSeq:
    Stmt TSemi StmtSeq { $1 :: $3 }
  | Stmt TSemi         { [$1] }
;

Stmt:
    TId TLParen CallParams TRParen  { ProcCall (#1 $1, $3, #2 $1) }
  | TIf Exp TThen Block             { IfThEl   ($2, $4, Block([],[]), $1) }
  | TIf Exp TThen Block TElse Block { IfThEl   ($2, $4, $6, $1) }
  | TWhile Exp TDo Block            { While    ($2, $4, $1) }
  | TReturn Ret                     { Return   ($2, $1) }
  | LVal TAssign Exp                { Assign   (#1 $1, $3, #2 $1) }
;

LVal:
    TId                          { (Var   (#1 $1),     #2 $1) }
  | TId TLBracket Exps TRBracket { (Index (#1 $1, $3), #2 $1) }
;

Ret:
    Exp         { SOME $1 }
  | /* empty */ { NONE    }
;

Exp:
    TNLit                          { packLiteral Num $1 }
  | TBLit                          { packLiteral Log $1 }
  | TCLit                          { packLiteral Chr $1 }
  | TSLit                          { StrLit $1 }
  | TLCurly Exps TRCurly           { ArrLit ($2,$1) }
  | LVal                           { LValue $1 }
  | TNot Exp                       { Not($2,$1) }
  | Exp TPlus Exp                  { opGen Plus $2($1,$3) }
  | Exp TMinus Exp                 { opGen Minus $2($1,$3) }
  | Exp TTimes Exp                 { opGen Times $2($1,$3) }
  | Exp TSlash Exp                 { opGen Div $2($1,$3) }
  | Exp TEq Exp                    { opGen Equal $2($1,$3) }
  | Exp TLess Exp                  { opGen Less $2($1,$3) }
  | Exp TAnd Exp                   { opGen And $2($1,$3) }
  | Exp TOr Exp                    { opGen Or $2($1,$3) }
  | TLParen Exp TRParen            { $2 }
  | TId TLParen CallParams TRParen { FunApp(#1 $1,$3,#2 $1) }
;

Exps:
    Exp  TComma Exps { $1 :: $3 }
  | Exp              { [$1] }
;

CallParams:
    Exps        { $1 }
  | /* empty */ { [] }
;

PDecl:
    Params      { $1 }
  | /* empty */ { [] }
;

Params:
    Dec TSemi Params { $1 :: $3 }
  | Dec              { [$1] }
;

Dec:
    TId TColon Type { Dec(#1 $1, $3, #2 $1) }
;

Decs:
   Dec TSemi Decs  { $1 :: $3 }
 | Dec TSemi { [$1] }
;

Type:
   TInt { Int $1 }
 | TBool { Bool $1 }
 | TChar { Char $1 }
 | TArray TOf Type { Array($3,$1) }
;
